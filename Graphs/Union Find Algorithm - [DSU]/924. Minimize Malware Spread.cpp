/*---------------------------
Method: Union Find Algorithm
  Time Complexity: O(n * n)
  Space Complexity: O(n)
-----------------------------*/

class DisJointSet {
public:
    vector<int> size, parent;

    DisJointSet(int n){
        size.resize(n, 1);
        parent.resize(n);
        for(int i = 0; i < n; i++) parent[i] = i;
    }

    int findUParent(int node){
        if(parent[node] == node) return node;
        return parent[node] = findUParent(parent[node]);
    }

    void UnionBySize(int u, int v){
        int ult_u = findUParent(u);
        int ult_v = findUParent(v);
        if(ult_u == ult_v) return;
        if(size[ult_u] < size[ult_v]){
            parent[ult_u] = ult_v;
            size[ult_v] += size[ult_u];
        } else {
            parent[ult_v] = ult_u;
            size[ult_u] += size[ult_v];
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int numNodes = graph.size();
        DisJointSet ds = DisJointSet(numNodes);

        for(int i = 0; i < numNodes; i++){
            for(int j = 0; j < numNodes; j++){
                if(graph[i][j] == 1 && i != j) ds.UnionBySize(i, j);
            }
        }

        unordered_map<int, vector<int>> infectedSectors;
        unordered_map<int, bool> infectedPersons;
        for(int i : initial) infectedPersons[i] = true;

        for(int i = 0; i < numNodes; i++){
            int ult_u = ds.findUParent(i);
            if(infectedPersons.find(i) != infectedPersons.end()) infectedSectors[ult_u].push_back(i);
        }

        int maxSavedNodes = 0, resultNode = -1;
        for(auto& component : infectedSectors){
            if(component.second.size() == 1){
                int node = component.second[0];
                int componentSize = ds.size[component.first];

                if (componentSize > maxSavedNodes || 
                    (componentSize == maxSavedNodes && node < resultNode)) {
                    resultNode = node;
                    maxSavedNodes = componentSize;
                }
            }
        }

        if (resultNode == -1){
            resultNode = initial[0];
            for(int node : initial) resultNode = min(resultNode, node);
        }
        return resultNode;
    }
};

/*
Question Link: https://leetcode.com/problems/minimize-malware-spread/
Author: M.R.Naganathan
*/
